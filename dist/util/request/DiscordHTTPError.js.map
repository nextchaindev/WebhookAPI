{"version":3,"file":"DiscordHTTPError.js","sourceRoot":"/","sources":["util/request/DiscordHTTPError.ts"],"names":[],"mappings":";;AAGA,MAAM,gBAAiB,SAAQ,KAAK;IAoBlC,YAAY,GAAkB,EAAE,GAAoB,EAAE,QAAa,EAAE,KAAa;QAChF,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,UAAoB,CAAC;QAEvC,IAAI,OAAO,GAAG,GAAG,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,aAAa,OAAO,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;QACpF,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC;YAAE,OAAO,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,KAAK;YAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC;aAClE;YAEH,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAChB,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;SACjD;IACH,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAC/B,CAAC;IAEO,aAAa,CAAC,MAAW,EAAE,SAAS,GAAG,EAAE;QAC/C,IAAI,QAAQ,GAAa,EAAE,CAAC;QAC5B,KAAK,MAAM,SAAS,IAAI,MAAM,EAAE;YAC9B,IAAI,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,MAAM;gBAAE,SAAS;YACxF,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE;gBACpC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,SAAS,GAAG,SAAS,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;aACxG;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAED,kBAAe,gBAAgB,CAAC","sourcesContent":["import { ClientRequest, IncomingMessage } from 'http';\n\n/** An HTTP error from a request. */\nclass DiscordHTTPError extends Error {\n  /** The client request of the error. */\n  readonly req: ClientRequest;\n  /** The response from the server. */\n  readonly res: IncomingMessage;\n  /** The response class from a {@link Server}. */\n  readonly response: any;\n  /** The status code from the response. */\n  readonly status: number;\n  /** The response message. */\n  readonly message: string;\n  /** The error stack. */\n  readonly stack: string;\n\n  /**\n   * @param req A client request\n   * @param res An incoming message from the server\n   * @param response Any {@link Server}s response class\n   * @param stack The error stack\n   */\n  constructor(req: ClientRequest, res: IncomingMessage, response: any, stack: string) {\n    super();\n\n    this.req = req;\n    this.res = res;\n    this.response = response;\n    this.status = res.statusCode as number;\n\n    let message = `${res.statusCode} ${res.statusMessage} on ${req.method} ${req.path}`;\n    const errors = this.flattenErrors(response);\n    if (errors.length > 0) message += '\\n  ' + errors.join('\\n  ');\n    this.message = message;\n\n    if (stack) this.stack = this.name + ': ' + this.message + '\\n' + stack;\n    else {\n      // Set stack before capturing to avoid TS error\n      this.stack = '';\n      Error.captureStackTrace(this, DiscordHTTPError);\n    }\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n\n  private flattenErrors(errors: any, keyPrefix = '') {\n    let messages: string[] = [];\n    for (const fieldName in errors) {\n      if (!(fieldName in errors) || fieldName === 'message' || fieldName === 'code') continue;\n      if (Array.isArray(errors[fieldName])) {\n        messages = messages.concat(errors[fieldName].map((str: string) => `${keyPrefix + fieldName}: ${str}`));\n      }\n    }\n    return messages;\n  }\n}\n\nexport default DiscordHTTPError;\n"]}