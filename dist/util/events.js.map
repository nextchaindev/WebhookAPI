{"version":3,"file":"events.js","sourceRoot":"/","sources":["util/events.ts"],"names":[],"mappings":";;;;AAAA,wDAAwB;AAExB,sCAAmC;AACnC,wBAAkC;AAGlC,8EAA8C;AAOjC,QAAA,MAAM,GAAG,IAAI,GAAG,EAAyB,CAAC;AAEhD,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,IAAA,gBAAa,EAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,EAAE,SAAS,CAAC,CAAC;AAA5E,QAAA,IAAI,QAAwE;AAEzF,SAAgB,SAAS,CAAC,QAAgB;IACxC,eAAM,CAAC,KAAK,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IAExC,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/B,IAAI,IAAI,CAAC,KAAK;QAAE,cAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1D,CAAC;AALD,8BAKC;AAED,SAAgB,UAAU,CAAC,OAA2B;IACpD,MAAM,MAAM,GAAG;QACb,MAAM,EAAE,MAAM;QACd,WAAW,EAAE,KAAK;KACnB,CAAC;IACF,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IACpH,IAAI,wBAAc,CAAC,KAAK,CAAC,eAAe,CAAC;QAAE,OAAO,CAAC,eAAe,EAAE,cAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;IAEjG,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE;QAC/E,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,eAAe,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7F,IAAI,wBAAc,CAAC,KAAK,CAAC,WAAW,CAAC;YAAE,OAAO,CAAC,WAAW,EAAE,cAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;KACtF;IAED,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;AAC5C,CAAC;AAfD,gCAeC;AAEY,QAAA,cAAc,GAAG;IAC5B,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,cAAc;IACd,cAAc;IACd,qBAAqB;CACtB,CAAC","sourcesContent":["import path from 'path';\n\nimport { logger } from '../logger';\nimport { iterateFolder } from '.';\nimport { TrelloPayload } from './types';\nimport WebhookData from './webhookData';\nimport WebhookFilters from './webhookFilters';\n\nexport interface EventFunction {\n  name: string;\n  onEvent(data: WebhookData): void | Promise<void>;\n}\n\nexport const events = new Map<string, EventFunction>();\n\nexport const load = () => iterateFolder(path.resolve(__dirname, '../events'), loadEvent);\n\nexport function loadEvent(filePath: string) {\n  logger.debug('Loading event', filePath);\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const file = require(filePath);\n  if (file.event) events.set(file.event.name, file.event);\n}\n\nexport function findFilter(payload: TrelloPayload<any>): [string, boolean] {\n  const keyMap = {\n    idList: 'list',\n    dueComplete: 'due'\n  };\n  const snakeCaseAction = payload.action.type.replace(/[A-Z]/g, (letter) => `_${letter.toLowerCase()}`).toUpperCase();\n  if (WebhookFilters.FLAGS[snakeCaseAction]) return [snakeCaseAction, events.has(snakeCaseAction)];\n\n  if (exports.PARENT_FILTERS.includes(snakeCaseAction) && payload.action.data.old) {\n    const keyChanged = Object.keys(payload.action.data.old)[0];\n    const childAction = snakeCaseAction + '_' + (keyMap[keyChanged] || keyChanged).toUpperCase();\n    if (WebhookFilters.FLAGS[childAction]) return [childAction, events.has(childAction)];\n  }\n\n  return [`!${payload.action.type}`, false];\n}\n\nexport const PARENT_FILTERS = [\n  'UPDATE_CARD',\n  'UPDATE_CHECK_ITEM',\n  'UPDATE_CHECKLIST',\n  'UPDATE_LIST',\n  'UPDATE_BOARD',\n  'UPDATE_LABEL',\n  'UPDATE_CUSTOM_FIELD'\n];\n"]}