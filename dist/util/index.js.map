{"version":3,"file":"index.js","sourceRoot":"/","sources":["util/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs';\nimport path from 'path';\n\nexport const IMAGE_ATTACHMENT_HOST = 'https://trello-attachments.s3.amazonaws.com/';\n\nexport function wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport async function iterateFolder(folderPath: string, callback: (filePath: string) => void | Promise<void>, extension = '.js') {\n  const files = await fs.readdir(folderPath);\n  await Promise.all(\n    files.map(async (file) => {\n      const filePath = path.join(folderPath, file);\n      const stat = await fs.lstat(filePath);\n      if (stat.isSymbolicLink()) {\n        const realPath = await fs.readlink(filePath);\n        if (stat.isFile() && file.endsWith(extension)) {\n          await callback(realPath);\n        } else if (stat.isDirectory()) {\n          await iterateFolder(realPath, callback, extension);\n        }\n      } else if (stat.isFile() && file.endsWith(extension)) await callback(filePath);\n      else if (stat.isDirectory()) await iterateFolder(filePath, callback, extension);\n    })\n  );\n}\n\nexport function isEmpty(text: string) {\n  if (!text) return false;\n  if (text.length === 1 && text.charCodeAt(0) === 8203) return true;\n  return text.trim().length === 0;\n}\n\nexport function cutoffText(text: string, limit = 2000) {\n  return text.length > limit ? text.slice(0, limit - 1) + 'â€¦' : text;\n}\n\nexport function escapeRegex(s: string) {\n  return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nexport function formatTime(dateString: string) {\n  const timestamp = Math.round(new Date(dateString).valueOf() / 1000);\n  return `<t:${timestamp}:F> *(<t:${timestamp}:R>)*`;\n}\n\nexport function escapeMarkdown(text: string) {\n  function italic(text: string) {\n    let i = 0;\n    text = text.replace(/(?<=^|[^*])\\*([^*]|\\*\\*|$)/g, (_, match) => {\n      if (match === '**') return ++i % 2 ? `\\\\*${match}` : `${match}\\\\*`;\n      return `\\\\*${match}`;\n    });\n    i = 0;\n    return text.replace(/(?<=^|[^_])_([^_]|__|$)/g, (_, match) => {\n      if (match === '__') return ++i % 2 ? `\\\\_${match}` : `${match}\\\\_`;\n      return `\\\\_${match}`;\n    });\n  }\n\n  function bold(text: string) {\n    let i = 0;\n    return text.replace(/\\*\\*(\\*)?/g, (_, match) => {\n      if (match) return ++i % 2 ? `${match}\\\\*\\\\*` : `\\\\*\\\\*${match}`;\n      return '\\\\*\\\\*';\n    });\n  }\n\n  function underline(text: string) {\n    let i = 0;\n    return text.replace(/__(_)?/g, (_, match) => {\n      if (match) return ++i % 2 ? `${match}\\\\_\\\\_` : `\\\\_\\\\_${match}`;\n      return '\\\\_\\\\_';\n    });\n  }\n\n  text = text\n    .replace(/(?<=^|[^`])`(?=[^`]|$)/g, '\\\\`') // inlineCode\n    .replace(/```/g, '\\\\`\\\\`\\\\`'); // codeBlock\n  text = underline(bold(italic(text)));\n  return text\n    .replace(/~~/g, '\\\\~\\\\~') // strikethrough\n    .replace(/\\|\\|/g, '\\\\|\\\\|'); // spoiler\n}\n"]}