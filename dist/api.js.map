{"version":3,"file":"api.js","sourceRoot":"/","sources":["api.ts"],"names":[],"mappings":";;;;AAAA,qEAAqC;AACrC,8DAAmD;AAEnD,mCAA4C;AAC5C,wCAAiD;AACjD,4CAAiF;AACjF,sCAAoF;AACpF,yCAA8C;AAC9C,qCAAkC;AAClC,qCAAgD;AAChD,0CAAmD;AACnD,0CAAoD;AAI7C,KAAK,UAAU,KAAK;IACzB,cAAM,GAAG,IAAA,iBAAO,EAAC;QACf,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;QAC7C,mBAAmB,EAAE,IAAI;QACzB,SAAS,EAAE,MAAM;KAClB,CAAC,CAAC;IAEH,YAAS,CAAC,KAAK,EAAE,CAAC;IAClB,aAAU,CAAC,KAAK,EAAE,CAAC;IACnB,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAA,aAAW,GAAE,EAAE,IAAA,aAAU,GAAE,EAAE,IAAA,kBAAS,GAAE,EAAE,IAAA,eAAY,GAAE,EAAE,cAAM,CAAC,QAAQ,CAAC,gBAAM,CAAC,CAAC,CAAC,CAAC;IAEvG,cAAM,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;QAG/C,GAAG,CAAC,gBAAgB,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QACxC,KAAK,CAAC,OAAO,CAAC;YACZ,iBAAiB,EAAE,OAAO,CAAC,MAAM,EAAE;YACnC,6BAA6B,EAAE,GAAG;YAClC,8BAA8B,EAAE,+DAA+D;YAC/F,UAAU,EAAE,OAAO;SACpB,CAAC,CAAC;QACH,OAAO;IACT,CAAC,CAAC,CAAC;IAEH,cAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;QAG5C,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAClD,KAAK,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAC/D,OAAO;IACT,CAAC,CAAC,CAAC;IAEH,cAAM,CAAC,KAAK,CAAC,oBAAS,CAAC,CAAC;IACxB,cAAM,CAAC,KAAK,CAAC,gBAAK,CAAC,CAAC;IACpB,cAAM,CAAC,KAAK,CAAC;QACX,MAAM,EAAE,KAAK;QACb,GAAG,EAAE,SAAS;QACd,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;YAC5B,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9C,CAAC;KACF,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC;IACxD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,WAAW,CAAC;IACjD,MAAM,cAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAEpC,eAAM,CAAC,IAAI,CAAC,2BAA2B,IAAI,UAAU,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,EAAE,CAAC,CAAC;IAG9F,IAAI,OAAO,CAAC,IAAI;QAAE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAExC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC3B,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,EAAE;QACvC,eAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;AACL,CAAC;AAvDD,sBAuDC;AAEM,KAAK,UAAU,IAAI;IACxB,eAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAChC,YAAS,CAAC,IAAI,EAAE,CAAC;IACjB,aAAU,CAAC,IAAI,EAAE,CAAC;IAClB,MAAM,cAAM,CAAC,KAAK,EAAE,CAAC;IACrB,MAAM,IAAA,cAAW,GAAE,CAAC;IACpB,MAAM,IAAA,qBAAY,GAAE,CAAC;IACrB,IAAA,kBAAe,GAAE,CAAC;IAClB,eAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACxC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAVD,oBAUC","sourcesContent":["import helmet from '@fastify/helmet';\nimport fastify, { FastifyInstance } from 'fastify';\n\nimport { cron as cacheCron } from './cache';\nimport { cron as influxCron } from './db/influx';\nimport { connect as pgConnect, disconnect as pgDisconnect } from './db/postgres';\nimport { connect as redisConnect, disconnect as redisDisconnect } from './db/redis';\nimport { headRoute, route } from './endpoint';\nimport { logger } from './logger';\nimport { close as sentryClose } from './sentry';\nimport { load as loadEvents } from './util/events';\nimport { load as loadLocales } from './util/locale';\n\nexport let server: FastifyInstance;\n\nexport async function start(): Promise<void> {\n  server = fastify({\n    logger: process.env.NODE_ENV !== 'production',\n    ignoreTrailingSlash: true,\n    bodyLimit: 262144 // 250KiB\n  });\n\n  cacheCron.start();\n  influxCron.start();\n  await Promise.all([loadLocales(), loadEvents(), pgConnect(), redisConnect(), server.register(helmet)]);\n\n  server.addHook('onRequest', async (req, reply) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    req.responseTimeCalc = process.hrtime();\n    reply.headers({\n      'X-Response-Time': process.hrtime(),\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n      Connection: 'close'\n    });\n    return;\n  });\n\n  server.addHook('onSend', async (req, reply) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const diff = process.hrtime(req.responseTimeCalc);\n    reply.header('X-Response-Time', diff[0] * 1e3 + diff[1] / 1e6);\n    return;\n  });\n\n  server.route(headRoute);\n  server.route(route);\n  server.route({\n    method: 'GET',\n    url: '/health',\n    handler: async (req, reply) => {\n      return reply.status(200).send({ ok: true });\n    }\n  });\n\n  const port = parseInt(process.env.API_PORT, 10) || 3000;\n  const host = process.env.API_HOST || '127.0.0.1';\n  await server.listen({ port, host });\n  // await server.listen();\n  logger.info(`Running webhook on port ${port}, env: ${process.env.NODE_ENV || 'development'}`);\n\n  // PM2 graceful start/shutdown\n  if (process.send) process.send('ready');\n\n  process.on('SIGINT', stop);\n  process.on('unhandledRejection', (err) => {\n    logger.error('Unhandled rejection', err);\n  });\n}\n\nexport async function stop(): Promise<void> {\n  logger.info('Shutting down...');\n  cacheCron.stop();\n  influxCron.stop();\n  await server.close();\n  await sentryClose();\n  await pgDisconnect();\n  redisDisconnect();\n  logger.info('All things disconnected.');\n  process.exit(0);\n}\n"]}