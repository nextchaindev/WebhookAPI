{"version":3,"file":"redis.js","sourceRoot":"/","sources":["db/redis.ts"],"names":[],"mappings":";;;;AAAA,8DAAsD;AAEtD,sCAAmC;AAGtB,QAAA,MAAM,GAAG,IAAI,iBAAK,CAAC;IAC9B,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;IAC5B,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC;IAC1C,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY;IACnC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;IACpC,WAAW,EAAE,IAAI;CAClB,CAAC,CAAC;AAEU,QAAA,SAAS,GAAG,IAAI,iBAAK,CAAC;IACjC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;IAC5B,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,CAAC;IAC1C,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY;IACnC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc;IACpC,WAAW,EAAE,IAAI;CAClB,CAAC,CAAC;AAEU,QAAA,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;AAE7D,QAAA,aAAa,GAAG,IAAI,GAAG,EAAmB,CAAC;AAExD,iBAAS,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;IAC3C,MAAM,MAAM,GAAG,gBAAgB,CAAC;IAChC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC;QAAE,OAAO;IACxC,MAAM,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACxC,IAAI,qBAAa,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;QACzB,eAAM,CAAC,GAAG,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;QAC1C,qBAAa,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;KAChD;AACH,CAAC,CAAC,CAAC;AAEI,MAAM,OAAO,GAAG,KAAK,IAAI,EAAE;IAChC,IAAI,iBAAS,EAAE;QACb,MAAM,cAAM,CAAC,OAAO,EAAE,CAAC;QACvB,MAAM,iBAAS,CAAC,OAAO,EAAE,CAAC;KAC3B;AACH,CAAC,CAAC;AALW,QAAA,OAAO,WAKlB;AAEK,MAAM,UAAU,GAAG,GAAG,EAAE;IAC7B,IAAI,iBAAS,EAAE;QACb,cAAM,CAAC,UAAU,EAAE,CAAC;QACpB,iBAAS,CAAC,UAAU,EAAE,CAAC;KACxB;AACH,CAAC,CAAC;AALW,QAAA,UAAU,cAKrB;AAEK,MAAM,QAAQ,GAAG,KAAK,EAAE,GAAa,EAAE,KAAiB,EAAE,EAAE;IACjE,IAAI,iBAAS;QAAE,OAAO,cAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;AAC9D,CAAC,CAAC;AAFW,QAAA,QAAQ,YAEnB;AAEK,MAAM,QAAQ,GAAG,KAAK,EAAE,GAAa,EAAE,EAAE;IAC9C,IAAI,iBAAS;QAAE,OAAO,MAAM,cAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC9C,CAAC,CAAC;AAFW,QAAA,QAAQ,YAEnB","sourcesContent":["import Redis, { RedisKey, RedisValue } from 'ioredis';\n\nimport { logger } from '../logger';\nimport Batcher from '../util/batcher';\n\nexport const client = new Redis({\n  host: process.env.REDIS_HOST,\n  port: parseInt(process.env.REDIS_PORT, 10),\n  keyPrefix: process.env.REDIS_PREFIX,\n  password: process.env.REDIS_PASSWORD,\n  lazyConnect: true\n});\n\nexport const subClient = new Redis({\n  host: process.env.REDIS_HOST,\n  port: parseInt(process.env.REDIS_PORT, 10),\n  keyPrefix: process.env.REDIS_PREFIX,\n  password: process.env.REDIS_PASSWORD,\n  lazyConnect: true\n});\n\nexport const available = process.env.REDIS_HOST && process.env.REDIS_PORT;\n\nexport const batchHandoffs = new Map<string, Batcher>();\n\nsubClient.on('message', (channel, message) => {\n  const prefix = 'batch_handoff:';\n  if (!channel.startsWith(prefix)) return;\n  const id = channel.slice(prefix.length);\n  if (batchHandoffs.has(id)) {\n    logger.log(`Passed in a batch for ${id}`);\n    batchHandoffs.get(id).add(JSON.parse(message));\n  }\n});\n\nexport const connect = async () => {\n  if (available) {\n    await client.connect();\n    await subClient.connect();\n  }\n};\n\nexport const disconnect = () => {\n  if (available) {\n    client.disconnect();\n    subClient.disconnect();\n  }\n};\n\nexport const setCache = async (key: RedisKey, value: RedisValue) => {\n  if (available) return client.set(key, value, 'EX', 60 * 60);\n};\n\nexport const getCache = async (key: RedisKey) => {\n  if (available) return await client.get(key);\n};\n"]}