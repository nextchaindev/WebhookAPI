{"version":3,"file":"influx.js","sourceRoot":"/","sources":["db/influx.ts"],"names":[],"mappings":";;;AAAA,iEAA8D;AAC9D,uCAA2D;AAC3D,+BAA+B;AAC/B,2BAA8B;AAE9B,sCAAmC;AACnC,yCAAqC;AAExB,QAAA,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,0BAAQ,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAExH,QAAA,IAAI,GAAG,IAAI,cAAO,CAAC,aAAa,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC;AAE9E,QAAA,cAAc,GAAa,EAAE,CAAC;AAC9B,QAAA,YAAY,GAAG,CAAC,CAAC;AAE5B,SAAgB,aAAa,CAAC,SAAiB;IAC7C,IAAI,CAAC,sBAAc,CAAC,QAAQ,CAAC,SAAS,CAAC;QAAE,sBAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAExE,oBAAY,EAAE,CAAC;AACjB,CAAC;AAJD,sCAIC;AAED,KAAK,UAAU,OAAO,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE;IAC3C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY;QAAE,OAAO;IAEjE,MAAM,YAAY,GAAG,MAAM,kBAAO,CAAC,KAAK,EAAE,CAAC;IAC3C,MAAM,kBAAkB,GAAG,MAAM,kBAAO,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAE5E,MAAM,QAAQ,GAAG,cAAO,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC;IAC7F,MAAM,KAAK,GAAG,IAAI,uBAAK,CAAC,iBAAiB,CAAC;SACvC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,IAAA,aAAQ,GAAE,CAAC;SACpD,QAAQ,CAAC,MAAM,EAAE,oBAAY,CAAC;SAC9B,QAAQ,CAAC,YAAY,EAAE,sBAAc,CAAC,MAAM,CAAC;SAC7C,QAAQ,CAAC,OAAO,EAAE,YAAY,CAAC;SAC/B,QAAQ,CAAC,aAAa,EAAE,kBAAkB,CAAC;SAC3C,SAAS,CAAC,SAAS,IAAI,YAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3C,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAG3B,IAAI;QACF,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvB,eAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;KACrC;IAAC,OAAO,CAAC,EAAE;QACV,IAAA,gBAAS,EAAC,CAAC,KAAK,EAAE,EAAE;YAClB,KAAK,CAAC,KAAK,EAAE,CAAC;YACd,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,IAAI,YAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrD,IAAA,uBAAgB,EAAC,CAAC,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,eAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,CAAC,CAAC,CAAC;KACnD;IAGD,sBAAc,GAAG,EAAE,CAAC;IACpB,oBAAY,GAAG,CAAC,CAAC;AACnB,CAAC","sourcesContent":["import { InfluxDB, Point } from '@influxdata/influxdb-client';\nimport { captureException, withScope } from '@sentry/node';\nimport { CronJob } from 'cron';\nimport { hostname } from 'os';\n\nimport { logger } from '../logger';\nimport { Webhook } from './postgres';\n\nexport const client = process.env.INFLUX_URL ? new InfluxDB({ url: process.env.INFLUX_URL, token: process.env.INFLUX_TOKEN }) : null;\n\nexport const cron = new CronJob('*/5 * * * *', collect, null, false, 'America/New_York');\n\nexport let activeWebhooks: string[] = [];\nexport let webhooksSent = 0;\n\nexport function onWebhookSend(webhookID: string) {\n  if (!activeWebhooks.includes(webhookID)) activeWebhooks.push(webhookID);\n\n  webhooksSent++;\n}\n\nasync function collect(timestamp = new Date()) {\n  if (!process.env.INFLUX_URL || !process.env.INFLUX_TOKEN) return;\n\n  const webhookCount = await Webhook.count();\n  const activeWebhookCount = await Webhook.count({ where: { active: true } });\n\n  const writeApi = client!.getWriteApi(process.env.INFLUX_ORG, process.env.INFLUX_BUCKET, 's');\n  const point = new Point('webhook_traffic')\n    .tag('server', process.env.SERVER_NAME || hostname())\n    .intField('sent', webhooksSent)\n    .intField('sentUnique', activeWebhooks.length)\n    .intField('count', webhookCount)\n    .intField('countActive', activeWebhookCount)\n    .timestamp(timestamp || cron.lastDate());\n  writeApi.writePoint(point);\n\n  // Send to influx\n  try {\n    await writeApi.close();\n    logger.log('Sent stats to Influx.');\n  } catch (e) {\n    withScope((scope) => {\n      scope.clear();\n      scope.setExtra('date', timestamp || cron.lastDate());\n      captureException(e);\n    });\n    logger.error('Error sending stats to Influx.', e);\n  }\n\n  // Flush data for next cron run\n  activeWebhooks = [];\n  webhooksSent = 0;\n}\n"]}