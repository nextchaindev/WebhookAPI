{"version":3,"file":"postgres.js","sourceRoot":"/","sources":["db/postgres.ts"],"names":[],"mappings":"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","sourcesContent":["import Sequelize, { Model, Sequelize as newSequelize } from 'sequelize';\n\nexport const client = new newSequelize(\n  process.env.PG_DATABASE,\n  process.env.PG_USER,\n  process.env.PG_PASSWORD,\n  {\n    host: process.env.PG_HOST,\n    dialect: 'postgres',\n    logging: false,\n    define: { timestamps: true }\n  }\n);\n\ninterface WebhookAttributes {\n  id: number;\n  memberID: string;\n  modelID: string;\n  trelloWebhookID: string;\n  filters: string;\n  active: boolean;\n  locale: string;\n  style: string;\n  guildID: string;\n  webhookID: string;\n  webhookToken: string;\n  whitelist: string;\n  lists: string[];\n  cards: string[];\n  threadID: string;\n}\n\nexport class Webhook extends Model<WebhookAttributes> implements WebhookAttributes {\n  public id!: number;\n  public memberID!: string;\n  public modelID!: string;\n  public trelloWebhookID!: string;\n  public filters!: string;\n  public active!: boolean;\n  public locale!: string;\n  public style!: string;\n  public guildID!: string;\n  public webhookID!: string;\n  public webhookToken!: string;\n  public whitelist!: string;\n  public lists!: string[];\n  public cards!: string[];\n  public threadID!: string;\n\n  public readonly createdAt!: Date;\n  public readonly updatedAt!: Date;\n}\n\nWebhook.init(\n  {\n    id: {\n      type: Sequelize.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    memberID: Sequelize.STRING,\n    modelID: {\n      type: Sequelize.STRING,\n      allowNull: false\n    },\n    trelloWebhookID: Sequelize.STRING,\n    filters: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      defaultValue: '0'\n    },\n    active: {\n      type: Sequelize.BOOLEAN,\n      allowNull: false,\n      defaultValue: true\n    },\n    locale: {\n      type: Sequelize.STRING,\n      allowNull: true,\n      defaultValue: null\n    },\n    style: {\n      type: Sequelize.STRING,\n      allowNull: false,\n      defaultValue: 'default'\n    },\n    guildID: {\n      type: Sequelize.STRING,\n      allowNull: false\n    },\n    webhookID: Sequelize.STRING,\n    webhookToken: Sequelize.STRING,\n    whitelist: {\n      type: Sequelize.BOOLEAN,\n      allowNull: false,\n      defaultValue: true\n    },\n    lists: {\n      type: Sequelize.ARRAY(Sequelize.STRING),\n      allowNull: false,\n      defaultValue: []\n    },\n    cards: {\n      type: Sequelize.ARRAY(Sequelize.STRING),\n      allowNull: false,\n      defaultValue: []\n    },\n    threadID: {\n      type: Sequelize.STRING,\n      allowNull: true,\n      defaultValue: null\n    }\n  },\n  { sequelize: client, modelName: 'webhook' }\n);\n\ninterface UserAttributes {\n  userID: string;\n  trelloToken: string;\n  trelloID: string;\n  discordToken: string;\n  discordRefresh: string;\n}\n\nexport const connect = (): Promise<unknown> => client.authenticate();\n\nexport const disconnect = (): Promise<void> => client.close();\n\nexport async function getUser(id: string): Promise<UserAttributes> {\n  const user = (await client.query({\n    query: 'SELECT * FROM users WHERE \"userID\"=?',\n    values: [id]\n  })) as [UserAttributes[], unknown];\n\n  console.debug('user: ', user);\n  if (user[0][0]) return user[0][0];\n}\n"]}