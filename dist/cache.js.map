{"version":3,"file":"cache.js","sourceRoot":"/","sources":["cache.ts"],"names":[],"mappings":";;;;AAAA,0DAA0B;AAC1B,+BAA+B;AAE/B,4CAAiD;AACjD,sCAA6E;AAC7E,qCAAkC;AAClC,4CAA8C;AAEjC,QAAA,gBAAgB,GAAG,IAAI,GAAG,EAA4B,CAAC;AAEpE,SAAgB,aAAa;IAC3B,gBAAgB,EAAE,CAAC;IACnB,IAAA,sBAAY,GAAE,CAAC;AACjB,CAAC;AAHD,sCAGC;AAED,SAAgB,gBAAgB;IAC9B,KAAK,CAAC,IAAI,CAAC,wBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE;QAC7D,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;YAAE,wBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,4CAIC;AAEM,KAAK,UAAU,SAAS,CAAC,MAAc,EAAE,OAAe,EAAE,OAAgB;IAC/E,IAAI,wBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC;QAAE,OAAO,wBAAgB,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC;IAE1E,IAAI,iBAAc,EAAE;QAClB,MAAM,MAAM,GAAG,MAAM,IAAA,gBAAQ,EAAC,OAAO,GAAG,MAAM,CAAC,CAAC;QAChD,IAAI,MAAM;YAAE,OAAO,MAAM,CAAC;KAC3B;IAGD,MAAM,YAAY,GAAG,MAAM,IAAA,kBAAO,EAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAErD,IAAI,YAAY,EAAE;QAChB,eAAM,CAAC,GAAG,CAAC,2BAA2B,OAAO,eAAe,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAChF,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAC9B,mCAAmC,OAAO,wCAAwC,OAAO,CAAC,GAAG,CAAC,UAAU,UAAU,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAC9I,CAAC;QAEF,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;YAE3B,wBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;YACjD,eAAM,CAAC,KAAK,CAAC,wDAAwD,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YACzG,OAAO,IAAI,CAAC;SACb;aAAM;YACL,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAwC,CAAC;YAEhE,IAAI,QAAQ,GAAW,IAAI,CAAC;YAC5B,KAAK,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,KAAK,EAAE;gBAClC,IAAI,EAAE,KAAK,MAAM;oBAAE,QAAQ,GAAG,MAAM,CAAC;gBACrC,IAAI,iBAAc,EAAE;oBAClB,MAAM,IAAA,gBAAQ,EAAC,OAAO,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;iBACtC;;oBAAM,wBAAgB,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;aACvD;YAED,OAAO,QAAQ,CAAC;SACjB;KACF;;QAAM,OAAO,IAAI,CAAC;AACrB,CAAC;AApCD,8BAoCC;AAEY,QAAA,IAAI,GAAG,IAAI,cAAO,CAAC,aAAa,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC","sourcesContent":["import axios from 'axios';\nimport { CronJob } from 'cron';\n\nimport { getUser, Webhook } from './db/postgres';\nimport { available as redisAvailable, getCache, setCache } from './db/redis';\nimport { logger } from './logger';\nimport { cleanBuckets } from './util/request';\n\nexport const cardListMapCache = new Map<string, [number, string]>();\n\nexport function cacheCronTick() {\n  cleanListIDCache();\n  cleanBuckets();\n}\n\nexport function cleanListIDCache() {\n  Array.from(cardListMapCache).forEach(([cardID, [timestamp]]) => {\n    if (timestamp < Date.now() + 1000 * 60 * 60 * 24) cardListMapCache.delete(cardID);\n  });\n}\n\nexport async function getListID(cardID: string, boardID: string, webhook: Webhook): Promise<string | null> {\n  if (cardListMapCache.has(cardID)) return cardListMapCache.get(cardID)![1];\n\n  if (redisAvailable) {\n    const listID = await getCache('card:' + cardID);\n    if (listID) return listID;\n  }\n\n  // Get board cards to cache for later\n  const trelloMember = await getUser(webhook.memberID);\n\n  if (trelloMember) {\n    logger.log(`Caching cards for board ${boardID} for member ${webhook.memberID}`);\n    const response = await axios.get(\n      `https://api.trello.com/1/boards/${boardID}/cards?filter=open&fields=idList&key=${process.env.TRELLO_KEY}&token=${process.env.TRELLO_SECRET}`\n    );\n\n    if (response.status !== 200) {\n      // Cache as null to prevent re-requesting\n      cardListMapCache.set(cardID, [Date.now(), null]);\n      logger.debug('Failed to cache list for card %s (board=%s, status=%s)', cardID, boardID, response.status);\n      return null;\n    } else {\n      const cards = response.data as { id: string; idList: string }[];\n\n      let resultID: string = null;\n      for (const { id, idList } of cards) {\n        if (id === cardID) resultID = idList;\n        if (redisAvailable) {\n          await setCache('card:' + id, idList);\n        } else cardListMapCache.set(id, [Date.now(), idList]);\n      }\n\n      return resultID;\n    }\n  } else return null;\n}\n\nexport const cron = new CronJob('0 0 * * * *', cleanListIDCache, null, false, 'America/New_York');\n"]}